{"version":3,"sources":["redux/book/bookAction.js","redux/book/bookType.js","component/BookContainer.js","component/HookBookContainer.js","redux/book/bookReducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["buyBook","number","type","payload","connect","state","numberOfBook","dispatch","props","useState","setNumber","style","backgroundColor","color","border","borderRadius","value","onChange","e","target","onClick","HookBookContainer","useSelector","useDispatch","initialState","Reducer","action","store","createStore","bookReducer","applyMiddleware","logger","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAEaA,EAAU,WAAkB,IAAhBC,EAAe,uDAAN,EAC9B,MAAO,CACHC,KCJgB,WDKhBC,QAAUF,IE0BlB,IAYeG,eAZS,SAACC,GACrB,MAAO,CACHC,aAAeD,EAAMC,iBAGF,SAACC,GACxB,MAAO,CACHP,QAAU,SAAUC,GAChBM,EAAUP,EAAQC,QAIfG,EAvCf,SAAwBI,GAAQ,IAAD,EAEGC,mBAAU,GAFb,mBAEnBR,EAFmB,KAEXS,EAFW,KAkB3B,OACI,oCACG,8CACP,wBAAIC,MAjBa,CACbC,gBAAkB,UAClBC,MAAQ,YAeZ,iBAAoCL,EAAMF,cAC1C,2BAAOK,MARY,CACfG,OAAS,iBACTC,aAAe,OAMOb,KAAK,OAAOc,MAAOf,EAAQgB,SAAW,SAACC,GAAD,OAAOR,EAAWQ,EAAEC,OAAOH,UAC3F,4BAAQL,MAfS,CACbC,gBAAkB,OAClBC,MAAQ,OACRC,OAAS,gBACTC,aAAe,QAWMK,QAAU,kBAAMZ,EAAMR,QAAQC,KAAvD,OAAqEA,EAArE,aCCWoB,MAxBf,WAEI,IAYMf,EAAegB,aAAc,SAAAjB,GAAK,OAAIA,EAAMC,gBAC5CC,EAAWgB,cACjB,OACI,oCACG,mDACP,wBAAIZ,MAjBc,CACdC,gBAAkB,UAClBC,MAAQ,YAeZ,oBAAwCP,GACxC,4BAAQK,MAbS,CACbC,gBAAkB,OAClBC,MAAQ,OACRC,OAAS,gBACTC,aAAe,QASMK,QAAS,kBAAIb,EAASP,OAA/C,c,+BCtBEwB,EAAe,CACjBlB,aAAe,IAaJmB,EAVC,WAAmC,IAAlCpB,EAAiC,uDAAzBmB,EAAcE,EAAW,uCAC9C,OAAQA,EAAOxB,MACX,IHRgB,WGShB,OAAO,2BACAG,GADP,IAEIC,aAAeD,EAAMC,aAAaoB,EAAOvB,UAE7C,QAAU,OAAOE,ICPVsB,EAFDC,YAAYC,EAAaC,YAAiBC,M,MCazCC,MAVf,WACE,OACE,yBAAKC,UAAU,OACd,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAaO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.93d6510c.chunk.js","sourcesContent":["import {BUY_BOOK} from './bookType';\r\n\r\nexport const buyBook = ( number = 1) => {\r\n    return {\r\n        type : BUY_BOOK,\r\n        payload : number\r\n    }\r\n}","export const BUY_BOOK = \"BUY_BOOK\";","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {buyBook} from '../redux';\r\n\r\nfunction BookContainer (props) {\r\n\r\n    const [ number, setNumber ] = useState (1);\r\n\r\n    const txtStyle = {\r\n        backgroundColor : '#f4f4f4',\r\n        color : '#555555'\r\n    }\r\n    const btnStyle = {\r\n        backgroundColor : '#000',\r\n        color : '#fff',\r\n        border : '3px red solid',\r\n        borderRadius : '10px'\r\n    }\r\n    const inputStyle = {\r\n        border : '1px #555 solid',\r\n        borderRadius : '7px'\r\n    }\r\n    return (\r\n        <>\r\n           <h2>Book Container</h2>\r\n    <h3 style={txtStyle}>Number Book - {props.numberOfBook}</h3>\r\n    <input style={inputStyle} type=\"text\" value={number} onChange={ (e) => setNumber (e.target.value)}/>\r\n    <button style={btnStyle} onClick={ () => props.buyBook(number)}>Buy {number} Book</button>\r\n        </>\r\n    )\r\n}\r\nconst mapStatetoProps = (state) => {\r\n    return {\r\n        numberOfBook : state.numberOfBook\r\n    }\r\n} \r\nconst mapDispatchtoProps = (dispatch) => {\r\n    return {\r\n        buyBook : function (number) {\r\n            dispatch (buyBook(number));\r\n        }\r\n    }\r\n}\r\nexport default connect (mapStatetoProps, mapDispatchtoProps) (BookContainer);","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {buyBook} from '../redux';\r\n\r\nfunction HookBookContainer () {\r\n\r\n    const textStyle = {\r\n        backgroundColor : '#f4f4f4',\r\n        color : '#555555'\r\n    }\r\n\r\n    const btnStyle = {\r\n        backgroundColor : '#000',\r\n        color : '#fff',\r\n        border : '3px red solid',\r\n        borderRadius : '10px'\r\n    }\r\n\r\n    const numberOfBook = useSelector ( state => state.numberOfBook);\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n           <h2>Hook Book Container</h2>\r\n    <h3 style={textStyle}>Number Of Book - {numberOfBook}</h3>\r\n    <button style={btnStyle} onClick={()=>dispatch(buyBook())}>Buy Book</button>\r\n        </>\r\n    )\r\n}\r\nexport default HookBookContainer;","import {BUY_BOOK} from './bookType';\r\n\r\nconst initialState = {\r\n    numberOfBook : 70\r\n}\r\n\r\nconst Reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case BUY_BOOK : \r\n        return {\r\n            ...state,\r\n            numberOfBook : state.numberOfBook-action.payload\r\n        }\r\n        default : return state;\r\n    }\r\n}\r\nexport default Reducer;","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport bookReducer from './book/bookReducer';\r\n\r\nconst store = createStore(bookReducer, applyMiddleware (logger));\r\n\r\nexport default store;","import React from 'react';\nimport { Provider } from 'react-redux';\nimport BookContainer from './component/BookContainer';\nimport HookBookConatiner from './component/HookBookContainer';\nimport store from './redux/store'; \nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Provider store={store}>\n       <HookBookConatiner />\n       <BookContainer />\n     </Provider>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}